
Bare_metal_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000548  08000548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000560  08000560  00001568  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000560  08000560  00001568  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000560  08000568  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000560  08000560  00001560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000564  08000564  00001564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000568  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000568  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c45  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004cf  00000000  00000000  000021dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000110  00000000  00000000  000026b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000af  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b47  00000000  00000000  0000286f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fc0  00000000  00000000  0001c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef93  00000000  00000000  0001e376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  000ad34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000ad598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000530 	.word	0x08000530

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000530 	.word	0x08000530

08000204 <led_inti>:




void led_inti(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	//enable clock access
	RCC->AHB1ENR |=  GPIOAEN;
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <led_inti+0x34>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a0a      	ldr	r2, [pc, #40]	@ (8000238 <led_inti+0x34>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PA5 mode to output
	GPIOA->MODER |=(1U<<10);
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <led_inti+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a08      	ldr	r2, [pc, #32]	@ (800023c <led_inti+0x38>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <led_inti+0x38>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a05      	ldr	r2, [pc, #20]	@ (800023c <led_inti+0x38>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800022a:	6013      	str	r3, [r2, #0]
}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40023800 	.word	0x40023800
 800023c:	40020000 	.word	0x40020000

08000240 <button_inti>:
	//set PA5 low
	GPIOA->ODR &=~ LED_PIN;
}

void button_inti(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	//enable clock access to portC
		RCC->AHB1ENR |=  GPIOCEN;
 8000244:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <button_inti+0x34>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <button_inti+0x34>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PC!3 as an input pin
		GPIOC->MODER |=(1U<<26);
 8000250:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <button_inti+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a08      	ldr	r2, [pc, #32]	@ (8000278 <button_inti+0x38>)
 8000256:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800025a:	6013      	str	r3, [r2, #0]
		GPIOC->MODER &=~(1U<<27);
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <button_inti+0x38>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <button_inti+0x38>)
 8000262:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000266:	6013      	str	r3, [r2, #0]

}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020800 	.word	0x40020800

0800027c <fpu_enable>:
#include "fpu.h"



void fpu_enable(void )
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

	//In Co-processor Access Control Register enable Enable CP10 and CP11

	SCB->CPACR |= (0xF << 20);
 8000280:	4b06      	ldr	r3, [pc, #24]	@ (800029c <fpu_enable+0x20>)
 8000282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000286:	4a05      	ldr	r2, [pc, #20]	@ (800029c <fpu_enable+0x20>)
 8000288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800028c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <Jump_To_application>:

typedef void (*functionPointer)(void);
void Jump_To_application(void);

void Jump_To_application()
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
	uint32_t application_start_address;

	functionPointer jump_to_app;

	uart2_write_string("Welcome to Bootloader\r\n");
 80002a6:	480b      	ldr	r0, [pc, #44]	@ (80002d4 <Jump_To_application+0x34>)
 80002a8:	f000 f8de 	bl	8000468 <uart2_write_string>

	delay(3);
 80002ac:	2003      	movs	r0, #3
 80002ae:	f000 f861 	bl	8000374 <delay>

	application_start_address = *(uint32_t *)(APPLICATION_ADDRESS + 4);
 80002b2:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <Jump_To_application+0x38>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	60fb      	str	r3, [r7, #12]

	jump_to_app = (functionPointer) application_start_address;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	60bb      	str	r3, [r7, #8]


	//initialize main stake pointer

	__set_MSP(*(uint32_t *)(APPLICATION_ADDRESS));
 80002bc:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <Jump_To_application+0x3c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f383 8808 	msr	MSP, r3
}
 80002c8:	bf00      	nop

	//jump to application

	jump_to_app();
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	4798      	blx	r3

	while(1)
 80002ce:	bf00      	nop
 80002d0:	e7fd      	b.n	80002ce <Jump_To_application+0x2e>
 80002d2:	bf00      	nop
 80002d4:	08000548 	.word	0x08000548
 80002d8:	08008004 	.word	0x08008004
 80002dc:	08008000 	.word	0x08008000

080002e0 <main>:

}


int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//FPU enable
	fpu_enable();
 80002e4:	f7ff ffca 	bl	800027c <fpu_enable>
	//UASRT@ enable
	//uartDebugInit();
	uart2_init();
 80002e8:	f000 f85a 	bl	80003a0 <uart2_init>

	//timebase
	timeBase_inti();
 80002ec:	f000 f808 	bl	8000300 <timeBase_inti>

	//LED INIT
	led_inti();
 80002f0:	f7ff ff88 	bl	8000204 <led_inti>

	//Button INIT
	button_inti();
 80002f4:	f7ff ffa4 	bl	8000240 <button_inti>

	Jump_To_application();
 80002f8:	f7ff ffd2 	bl	80002a0 <Jump_To_application>

	while(1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x1c>

08000300 <timeBase_inti>:
#define ONE_MILE			16000000

volatile uint32_t current_tick = 0;

void timeBase_inti(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
	//disable global interrupts
	__disable_irq();

	//load the timer with number of cycles per second
	SysTick->LOAD = ONE_MILE - 1;
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <timeBase_inti+0x48>)
 800030a:	4a10      	ldr	r2, [pc, #64]	@ (800034c <timeBase_inti+0x4c>)
 800030c:	605a      	str	r2, [r3, #4]

	//clear the current value of sys_tick register
	SysTick->VAL = 0;
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <timeBase_inti+0x48>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]

	//select internal clock source
	SysTick->CTRL |= CTRL_SYS_CLKSCR;
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <timeBase_inti+0x48>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <timeBase_inti+0x48>)
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6013      	str	r3, [r2, #0]

	//Enable interrupts
	SysTick->CTRL |= CTRL_SYS_TICKINIT;
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <timeBase_inti+0x48>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <timeBase_inti+0x48>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6013      	str	r3, [r2, #0]

	//Enable sys_tick
	SysTick->CTRL |= CTRL_SYS_ENABLE;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <timeBase_inti+0x48>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a05      	ldr	r2, [pc, #20]	@ (8000348 <timeBase_inti+0x48>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000338:	b662      	cpsie	i
}
 800033a:	bf00      	nop

	//enable global interrupts
	__enable_irq();
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010
 800034c:	00f423ff 	.word	0x00f423ff

08000350 <SysTick_Handler>:

void SysTick_Handler(void)

{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	if(current_tick > 0 )
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <SysTick_Handler+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d004      	beq.n	8000366 <SysTick_Handler+0x16>
	{
		current_tick--;
 800035c:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <SysTick_Handler+0x20>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a03      	ldr	r2, [pc, #12]	@ (8000370 <SysTick_Handler+0x20>)
 8000364:	6013      	str	r3, [r2, #0]
	}
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	2000001c 	.word	0x2000001c

08000374 <delay>:

void delay(uint32_t sec)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]

	current_tick = sec;
 800037c:	4a07      	ldr	r2, [pc, #28]	@ (800039c <delay+0x28>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6013      	str	r3, [r2, #0]

	while(current_tick != 0)
 8000382:	bf00      	nop
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <delay+0x28>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1fb      	bne.n	8000384 <delay+0x10>
	{

	}

}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	2000001c 	.word	0x2000001c

080003a0 <uart2_init>:
	USART2->DR = (ch & 0XFF);
}
*/


void uart2_init(void) {
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
    // Enable clocks
	    // 1. Enable clocks
	    RCC->AHB1ENR |= GPIOAEN;
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <uart2_init+0x8c>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a20      	ldr	r2, [pc, #128]	@ (800042c <uart2_init+0x8c>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30
	    RCC->APB1ENR |= UART2ENABLE;
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <uart2_init+0x8c>)
 80003b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003b4:	4a1d      	ldr	r2, [pc, #116]	@ (800042c <uart2_init+0x8c>)
 80003b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ba:	6413      	str	r3, [r2, #64]	@ 0x40

	    // 2. Configure PA2 as USART2_TX
	    GPIOA->MODER &= ~(0x3 << (2 * 2));
 80003bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <uart2_init+0x90>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <uart2_init+0x90>)
 80003c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003c6:	6013      	str	r3, [r2, #0]
	    GPIOA->MODER |=  (0x2 << (2 * 2));
 80003c8:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <uart2_init+0x90>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a18      	ldr	r2, [pc, #96]	@ (8000430 <uart2_init+0x90>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6013      	str	r3, [r2, #0]

	    GPIOA->AFR[0] &= ~(0xF << (4 * 2));
 80003d4:	4b16      	ldr	r3, [pc, #88]	@ (8000430 <uart2_init+0x90>)
 80003d6:	6a1b      	ldr	r3, [r3, #32]
 80003d8:	4a15      	ldr	r2, [pc, #84]	@ (8000430 <uart2_init+0x90>)
 80003da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003de:	6213      	str	r3, [r2, #32]
	    GPIOA->AFR[0] |=  (0x7 << (4 * 2));
 80003e0:	4b13      	ldr	r3, [pc, #76]	@ (8000430 <uart2_init+0x90>)
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	4a12      	ldr	r2, [pc, #72]	@ (8000430 <uart2_init+0x90>)
 80003e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80003ea:	6213      	str	r3, [r2, #32]

	    GPIOA->OSPEEDR |= (0x3 << (2 * 2));
 80003ec:	4b10      	ldr	r3, [pc, #64]	@ (8000430 <uart2_init+0x90>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000430 <uart2_init+0x90>)
 80003f2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003f6:	6093      	str	r3, [r2, #8]
	    GPIOA->PUPDR &= ~(0x3 << (2 * 2));
 80003f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000430 <uart2_init+0x90>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000430 <uart2_init+0x90>)
 80003fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000402:	60d3      	str	r3, [r2, #12]

	    // 3. Setup USART2
	    USART2->BRR = 16000000 / 115200;   // For 16MHz clock
 8000404:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <uart2_init+0x94>)
 8000406:	228a      	movs	r2, #138	@ 0x8a
 8000408:	609a      	str	r2, [r3, #8]
	    USART2->CR1 |= USARTCR1TE;
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <uart2_init+0x94>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4a09      	ldr	r2, [pc, #36]	@ (8000434 <uart2_init+0x94>)
 8000410:	f043 0308 	orr.w	r3, r3, #8
 8000414:	60d3      	str	r3, [r2, #12]
	    USART2->CR1 |= USARTCR1UE;
 8000416:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <uart2_init+0x94>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	4a06      	ldr	r2, [pc, #24]	@ (8000434 <uart2_init+0x94>)
 800041c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000420:	60d3      	str	r3, [r2, #12]

}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40023800 	.word	0x40023800
 8000430:	40020000 	.word	0x40020000
 8000434:	40004400 	.word	0x40004400

08000438 <uart2_write_char>:

void uart2_write_char(char ch) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR& USARTSRTXE));
 8000442:	bf00      	nop
 8000444:	4b07      	ldr	r3, [pc, #28]	@ (8000464 <uart2_write_char+0x2c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <uart2_write_char+0xc>
    USART2->DR = ch;
 8000450:	4a04      	ldr	r2, [pc, #16]	@ (8000464 <uart2_write_char+0x2c>)
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	6053      	str	r3, [r2, #4]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40004400 	.word	0x40004400

08000468 <uart2_write_string>:

void uart2_write_string(const char *str) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
    while (*str) uart2_write_char(*str++);
 8000470:	e006      	b.n	8000480 <uart2_write_string+0x18>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	1c5a      	adds	r2, r3, #1
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ffdc 	bl	8000438 <uart2_write_char>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f4      	bne.n	8000472 <uart2_write_string+0xa>
}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000494:	480d      	ldr	r0, [pc, #52]	@ (80004cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000496:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000498:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800049c:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800049e:	490d      	ldr	r1, [pc, #52]	@ (80004d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <LoopForever+0xe>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a4:	e002      	b.n	80004ac <LoopCopyDataInit>

080004a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004aa:	3304      	adds	r3, #4

080004ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b0:	d3f9      	bcc.n	80004a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b2:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b4:	4c0a      	ldr	r4, [pc, #40]	@ (80004e0 <LoopForever+0x16>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b8:	e001      	b.n	80004be <LoopFillZerobss>

080004ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004bc:	3204      	adds	r2, #4

080004be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c0:	d3fb      	bcc.n	80004ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c2:	f000 f811 	bl	80004e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c6:	f7ff ff0b 	bl	80002e0 <main>

080004ca <LoopForever>:

LoopForever:
  b LoopForever
 80004ca:	e7fe      	b.n	80004ca <LoopForever>
  ldr   r0, =_estack
 80004cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d8:	08000568 	.word	0x08000568
  ldr r2, =_sbss
 80004dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e0:	20000020 	.word	0x20000020

080004e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e4:	e7fe      	b.n	80004e4 <ADC_IRQHandler>
	...

080004e8 <__libc_init_array>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000520 <__libc_init_array+0x38>)
 80004ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000524 <__libc_init_array+0x3c>)
 80004ee:	1b64      	subs	r4, r4, r5
 80004f0:	10a4      	asrs	r4, r4, #2
 80004f2:	2600      	movs	r6, #0
 80004f4:	42a6      	cmp	r6, r4
 80004f6:	d109      	bne.n	800050c <__libc_init_array+0x24>
 80004f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000528 <__libc_init_array+0x40>)
 80004fa:	4c0c      	ldr	r4, [pc, #48]	@ (800052c <__libc_init_array+0x44>)
 80004fc:	f000 f818 	bl	8000530 <_init>
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	10a4      	asrs	r4, r4, #2
 8000504:	2600      	movs	r6, #0
 8000506:	42a6      	cmp	r6, r4
 8000508:	d105      	bne.n	8000516 <__libc_init_array+0x2e>
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000510:	4798      	blx	r3
 8000512:	3601      	adds	r6, #1
 8000514:	e7ee      	b.n	80004f4 <__libc_init_array+0xc>
 8000516:	f855 3b04 	ldr.w	r3, [r5], #4
 800051a:	4798      	blx	r3
 800051c:	3601      	adds	r6, #1
 800051e:	e7f2      	b.n	8000506 <__libc_init_array+0x1e>
 8000520:	08000560 	.word	0x08000560
 8000524:	08000560 	.word	0x08000560
 8000528:	08000560 	.word	0x08000560
 800052c:	08000564 	.word	0x08000564

08000530 <_init>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr

0800053c <_fini>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr
